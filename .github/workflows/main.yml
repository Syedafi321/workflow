name: Pull request from main to env branches

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  pr-to-env:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.JOSYS_GITHUB_TOKEN }}
      EXCLUDE_BRANCHES: ${{ vars.EXCLUDE_BRANCHES }}
      INCLUDE_BRANCHES: ${{ vars.INCLUDE_BRANCHES }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      # ... (previous steps remain the same)

      - name: Create or Update Pull Requests to env branches
        id: create_prs
        run: |
          # ... (previous content of this step remains the same)

          # Add this at the end of the step
          echo "pr_summary<<EOF" >> $GITHUB_OUTPUT
          for branch in "${branches[@]}"; do
            if [[ " ${EXCLUDE_BRANCHES[@]} " =~ " ${branch} " ]]; then
              continue
            fi
            pr_url=$(echo "::set-output name=pr_url::$pr_url" | awk -F'::' '{print $3}')
            pr_number=$(echo $pr_url | awk -F/ '{print $NF}')
            merge_status=$(curl -s -X GET -H "Authorization: Bearer $GITHUB_TOKEN" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$pr_number" | \
              jq -r '.mergeable_state')
            echo "$branch|$pr_url|$merge_status" >> $GITHUB_OUTPUT
          done
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check PR merge status and prepare summary
        id: pr_summary
        run: |
          echo "${{ steps.create_prs.outputs.pr_summary }}" > pr_summary.txt
          mergeable_prs=$(grep -c "|clean$" pr_summary.txt)
          conflicting_prs=$(grep -c "|dirty$" pr_summary.txt)
          echo "mergeable_prs=$mergeable_prs" >> $GITHUB_OUTPUT
          echo "conflicting_prs=$conflicting_prs" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        if: always()
        run: |
          summary=$(cat pr_summary.txt)
          IFS=$'\n'
          rows=""
          for line in $summary; do
            IFS='|' read -r branch url status <<< "$line"
            rows="$rows
            {
              \"type\": \"section\",
              \"fields\": [
                {\"type\": \"mrkdwn\", \"text\": \"*Branch:*\n$branch\"},
                {\"type\": \"mrkdwn\", \"text\": \"*Status:*\n$status\"},
                {\"type\": \"mrkdwn\", \"text\": \"*PR URL:*\n$url\"}
              ]
            },"
          done
          
          payload=$(cat <<EOF
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Pull Request Summary",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Mergeable PRs:*\n${{ steps.pr_summary.outputs.mergeable_prs }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Conflicting PRs:*\n${{ steps.pr_summary.outputs.conflicting_prs }}"
                  }
                ]
              },
              {
                "type": "divider"
              },
              ${rows%,}
            ]
          }
          EOF
          )
          curl -X POST -H 'Content-type: application/json' --data "$payload" $SLACK_WEBHOOK
