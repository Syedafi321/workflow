name: Pull request from main to env branches

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  pr-to-env:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.JOSYS_GITHUB_TOKEN }}
      EXCLUDE_BRANCHES: ${{ vars.EXCLUDE_BRANCHES }}
      INCLUDE_BRANCHES: ${{ vars.INCLUDE_BRANCHES }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.JOSYS_GITHUB_TOKEN }}

      - name: Install Hub CLI
        run: |
          sudo snap install hub --classic

      - name: Fetch env branches
        id: fetch_env_branches
        run: |
          git fetch --all
          branches=$(git branch -r | grep 'origin/env/' | sed 's|origin/||')
          echo "::set-output name=branches::$(echo $branches | tr '\n' ' ')"

      - name: Create or Update Pull Requests to env branches
        id: create_prs
        run: |
          check_rate_limit() {
            rate_limit=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/rate_limit")
            remaining=$(echo $rate_limit | jq -r '.rate.remaining')
            reset=$(echo $rate_limit | jq -r '.rate.reset')
            if [ "$remaining" -lt 5 ]; then
              current_time=$(date +%s)
              wait_time=$((reset - current_time + 10))  # Add 10 seconds buffer
              echo "Rate limit exceeded. Waiting for $wait_time seconds."
              sleep $wait_time
            fi
          }

          # Parse the environment variables into arrays
          if [ "$EXCLUDE_BRANCHES" != "null" ]; then
            IFS=',' read -r -a EXCLUDE_BRANCHES <<< "$EXCLUDE_BRANCHES"
          else
            EXCLUDE_BRANCHES=()
          fi

          if [ "$INCLUDE_BRANCHES" != "null" ]; then
            IFS=',' read -r -a INCLUDE_BRANCHES <<< "$INCLUDE_BRANCHES"
          else
            INCLUDE_BRANCHES=()
          fi

          # Fetch branches and process inclusion and exclusion
          git fetch origin
          branches=(${{ steps.fetch_env_branches.outputs.branches }})

          # Add include branches to the list if not null
          if [ "${#INCLUDE_BRANCHES[@]}" -ne 0 ]; then
            for include_branch in "${INCLUDE_BRANCHES[@]}"; do
              branches+=("$include_branch")
            done
          fi

          summary=""
          for branch in "${branches[@]}"; do
            # Skip excluded branches if not null
            if [[ " ${EXCLUDE_BRANCHES[@]} " =~ " ${branch} " ]]; then
              echo "Skipping branch $branch as it is in the exclusion list."
              continue
            fi

            check_rate_limit
            echo "Checking if a pull request already exists for $branch"
            existing_pr=$(curl -s -X GET -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls?head=main&base=$branch")
            if [[ $(echo "$existing_pr" | jq -r ".[].head.ref") == "main" ]]; then
              echo "A pull request already exists from main to $branch."
              pr_url=$(echo "$existing_pr" | jq -r ".[0].html_url")
              pr_number=$(echo "$existing_pr" | jq -r ".[0].number")
            else
              echo "Creating pull request from main to $branch"
              pr_url=$(hub pull-request -b $branch -h main -m "PR from main to $branch")
              pr_number=$(echo $pr_url | awk -F/ '{print $NF}')
              sleep 10
            fi

            # Check if PR can be merged
            check_rate_limit
            pr_info=$(curl -s -X GET -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$pr_number")
            mergeable=$(echo "$pr_info" | jq -r '.mergeable')

            if [ "$mergeable" == "true" ]; then
              status="Can be merged"
            elif [ "$mergeable" == "false" ]; then
              status="Has merge conflicts"
            else
              status="Merge status unknown"
            fi

            summary="${summary}- <$pr_url|PR #$pr_number> (${branch}): $status\n"

            merged_pr_number=${{ github.event.pull_request.number }}

            labels=$(curl -s -X GET -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$merged_pr_number/labels" | jq -r '.[].name')

            if [[ -z "$labels" ]]; then
              echo "No labels found on the merged PR. Removing labels from the new PR."
              curl -s -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$pr_number/labels"
            else
              echo "Transferring labels to the new PR."
              for label in $labels; do
                check_rate_limit
                curl -s -X POST -H "Authorization: Bearer $GITHUB_TOKEN" -H "Content-Type: application/json" \
                  --data "{\"labels\":[\"$label\"]}" "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$pr_number/labels"
                sleep 2
              done
            fi
            sleep 5
          done

          # Send summary to Slack
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"Summary of PRs created:\n$summary\"}" $SLACK_WEBHOOK
