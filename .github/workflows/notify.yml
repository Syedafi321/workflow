name: Daily Pull Request Report

on:
  schedule:
    - cron: '0 9 * * *'  # Runs at 9 AM UTC every day
  workflow_dispatch:  # Allows manual triggering

jobs:
  generate-pr-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openpyxl requests

      - name: Get open pull requests
        id: get-prs
        run: |
          prs=$(gh pr list --json number,title,author,createdAt,headRefName,baseRefName,changedFiles,reviewRequests --jq '
            map({
              number: .number,
              title: .title,
              author: .author.login,
              created_at: .createdAt,
              head_branch: .headRefName,
              base_branch: .baseRefName,
              changed_files: .changedFiles,
              reviewers: [.reviewRequests[].login] | join(", ")
            }) | tojson
          ')
          echo "prs=$prs" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Excel report and send to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          import json
          import datetime
          import requests
          from openpyxl import Workbook
          from openpyxl.styles import Font, Alignment

          prs = json.loads('${{ steps.get-prs.outputs.prs }}')

          wb = Workbook()
          ws = wb.active
          ws.title = "Pull Requests Report"

          headers = ["PR #", "Title", "Created By", "From Branch", "To Branch", "Files Changed", "Days Open", "Reviewers"]
          for col, header in enumerate(headers, start=1):
              cell = ws.cell(row=1, column=col, value=header)
              cell.font = Font(bold=True)
              cell.alignment = Alignment(horizontal='center')

          if not prs:
              ws.append(["No open pull requests"])
          else:
              for row, pr in enumerate(prs, start=2):
                  created_at = datetime.datetime.fromisoformat(pr['created_at'].replace('Z', '+00:00'))
                  days_open = (datetime.datetime.now(datetime.timezone.utc) - created_at).days
                  ws.append([
                      pr['number'],
                      pr['title'],
                      pr['author'],
                      pr['head_branch'],
                      pr['base_branch'],
                      pr['changed_files'],
                      days_open,
                      pr['reviewers']
                  ])

          for column in ws.columns:
              max_length = 0
              column_letter = column[0].column_letter
              for cell in column:
                  try:
                      if len(str(cell.value)) > max_length:
                          max_length = len(cell.value)
                  except:
                      pass
              adjusted_width = (max_length + 2)
              ws.column_dimensions[column_letter].width = adjusted_width

          filename = "pr_report.xlsx"
          wb.save(filename)

          # Send file to Slack
          with open(filename, 'rb') as file_content:
              files = {'file': file_content}
              data = {
                  'channels': '${{ secrets.SLACK_CHANNEL_ID }}',
                  'initial_comment': 'Here is the daily Pull Request report:'
              }
              response = requests.post(
                  'https://slack.com/api/files.upload',
                  headers={'Authorization': 'Bearer ${{ secrets.SLACK_BOT_TOKEN }}'},
                  data=data,
                  files=files
              )
          
          if not response.json()['ok']:
              raise Exception(f"Failed to send file to Slack: {response.json()['error']}")
        shell: python
